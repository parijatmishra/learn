package net.nihilanth.demo.benchmarks.collections;

import org.openjdk.jmh.annotations.Benchmark;

import java.util.stream.LongStream;

/**
 * stream vs parallel stream operations
 */
public class ParallelStreamBenchmark {
    private static final long N = 1_000_000;

    @Benchmark
    public void longStreamSeqSum() {
        /* Sum a sequence of numbers generated by a LongStream */
        long ret = LongStream.range(1, N+1).sum();
        long expected = N * (N+1) / 2;

        if (ret != expected) {
            System.out.println("ERROR: longStreamSeqSum: expected [" + expected + "]; got [" + ret + "]");
        }
    }

    @Benchmark
    public void longStreamParSum() {
        /* Sum a sequence of numbers generated by a LongStream, using parallel strems */
        long ret = LongStream.range(1, N+1)
                .parallel()
                .sum();

        long expected = N * (N+1) / 2;

        if (ret != expected) {
            System.out.println("ERROR: longStreamParSum: expected [" + expected + "]; got [" + ret + "]");
        }
    }
}
