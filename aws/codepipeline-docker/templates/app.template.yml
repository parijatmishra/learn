AWSTemplateFormatVersion: "2010-09-09"
Description: >-
    This template deploys a long running ECS service to an existing ECS
    cluster, and uses an existnig Application Load Balancer.  It assumes the a
    VPC stack, and ALB stack, and an ECS stack have already been deployed and
    it can import certain outputs from them.
Parameters:
    Path:
        Type: String
        Description: The path (e.g, `/greeting`) that will map to this service, on the load balancer.
    HealthCheckPath:
        Type: String
        Description: The path (e.g, `/greeting/status`) that will used to check that this service is healthy (must return HTTP Status 2xx).
    DesiredCount:
        Type: Number
        Default: 2
        Description: How many instances of this task should run across the cluster?
    ImageRepository:
        Type: String
        Description: Name of the ECR repository from which to pull Docker images
    ImageTag:
        Type: String
        Description: Tag of the Docker image to pull
    VPCStackName:
        Type: String
        Description: Name of a CloudFormation stack that created a VPC as per QS(0027).
    LoadBalancerStackName:
        Type: String
        Description: Name of a CloudFormation stack that created a Application Load Balancer for our ECS Cluster.
    ECSClusterStackName:
        Type: String
        Description: Name of a CloudFormation stack that created an ECS Cluster.
Resources:
    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ecs-tasks.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            # We don't have any Policies as our task does not call any AWS services
    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 30
    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: spring-boot-rest-greeting
            TaskRoleArn: !Ref TaskRole
            ContainerDefinitions:
                - Name: spring-boot-rest-greeting
                  Essential: true
                  Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepository}:${ImageTag}
                  Memory: 256
                  PortMappings:
                      - ContainerPort: 8080
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref AWS::StackName
                          awslogs-region: !Ref AWS::Region
                          awslogs-prefix: spring-boot-rest-greeting
    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Sub ${VPCStackName}-VPCID
            Port: 80
            Protocol: HTTP
            HealthCheckPath: !Ref HealthCheckPath
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthCheckIntervalSeconds: 5
            HealthyThresholdCount: 2
            Matcher:
                HttpCode: 200-299
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: 10
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListernerArn:
                Fn::ImportValue:
                    !Sub ${LoadBalancerStackName}-ListenerArn
            Priority: 2
            Conditions:
                - Field: path-pattern
                  Value:
                      - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
    Service:
        Type: AWS::ECS::Service
        Properties:
            ServiceName: ${AWS::StackName}
            TaskDefinition: !Ref TaskDefinition
            DesiredCount: !Ref DesiredCount
            Cluster: !Sub ${ECSClusterStackName}-ECSClusterArn
            Role: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsServiceRole
            LoadBalancers:
                - ContainerName: spring-boot-rest-greeting
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup
Outputs:
    ServiceArn:
        Value: !Ref Service
    TaskDefinitionArn:
        Value: !Ref TaskDefinition
    URL:
        Value: !Sub ${LoadBalancerStackName}-DNSName/${Path}
